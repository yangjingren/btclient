import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;

import GivenTools.*;

public class RUBTClient {
	//convert info_hash to hex
	public static String toHex(byte[] bytes) {
	    BigInteger bi = new BigInteger(1, bytes);
	    return String.format("%0" + (bytes.length << 1) + "X", bi);
	}
	public static void main(String[] args) {
		
		//Check if the arguments are valid
		if ( args.length < 2 || args.length > 2){
			System.out.println("Usage: RUBTClient torrent_file file_save_name\n");
			return;
		}
		else {
			
			// Check if first argument is a valid host
			Path torrentFile = Paths.get(args[0]);
			byte[] tfArray;
			try {
				//Read torrent file into a byte array
				tfArray = Files.readAllBytes(torrentFile);
				try {
			        TorrentInfo tf = new TorrentInfo(tfArray);
			        System.out.println(tf.announce_url.getPath());
			        String charset = "UTF-8";
			        String url = "http://allods.com";
			        String port = "6881";
			        String peer_id = "ILDOEISPEJDMEISNDHII";
			        String up = "0";
			        String down = "0";
			        String left = "287";
			        String charset2 = "US-ASCII";
			        String hast = new String (tf.info_hash.array());
			        String query = String.format(("info_hash=%s&peer_id=%s&port=%s&uploaded=%s&downloaded=%s&left=%s"),URLEncoder.encode(toHex(tf.info_hash.array()),charset),URLEncoder.encode(peer_id,charset2),URLEncoder.encode(port,charset2),URLEncoder.encode(up,charset2),URLEncoder.encode(down,charset2),URLEncoder.encode(left,charset2));
			        
			        URL combined = new URL(tf.announce_url + "?"+query);
			       
			        System.out.println(combined);
			        URLConnection connection = combined.openConnection();
			        connection.setRequestProperty("Accept-Charset", charset);
			        InputStream response = connection.getInputStream();
			        BufferedReader reader = new BufferedReader(new InputStreamReader(response));
			        String line;
			        StringBuilder out = new StringBuilder();
			        while(((line =reader.readLine()))!=null){
			        	out.append(line);
			        }
			        System.out.println(out.toString());
			        reader.close();
			        String has = new String(toHex(tf.piece_hashes[1].array()));
			        System.out.println(has);
				} catch (BencodingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			// Check if second argument is a valid port number
			Path saveFile = Paths.get(args[0]);
			
			
		System.out.print("Torrent_File: " + args[0] + "\n" + "File_Save_Name: " + args[1] + "\n");
		
		}
		//End argument check
	}
}

